import { Bot } from 'grammy';
import { Logger } from '../lib/logger';
import dotenv from 'dotenv';
import { logger } from '@/lib/logger';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const loggerBot = new Logger('Bot');

// URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const WEB_APP_URL = process.env.NEXT_PUBLIC_WEB_URL || 'https://infico.online';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if (!process.env.BOT_TOKEN) {
  throw new Error('BOT_TOKEN is required in .env file');
}

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_TOKEN);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  try {
    loggerBot.info('Command', 'Start command received', { userId: ctx.from?.id });

    const keyboard = {
      reply_markup: {
        keyboard: [
          [{ 
            text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: WEB_APP_URL }
          }],
          [{ text: '‚ùì –ü–æ–º–æ—â—å' }]
        ],
        resize_keyboard: true
      }
    };

    await ctx.reply(
      '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.\n\n' +
      '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:',
      keyboard
    );
  } catch (error) {
    loggerBot.error('Command', 'Error in start command', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.command('help', async (ctx) => {
  try {
    await ctx.reply(
      '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
      '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n' +
      '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
      '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @admin'
    );
  } catch (error) {
    loggerBot.error('Command', 'Error in help command', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø—Ä–∞–≤–∫–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message:text', async (ctx) => {
  try {
    const text = ctx.message.text;

    switch (text) {
      case 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ':
        // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∫–Ω–æ–ø–∫–∞ —Å—Ä–∞–∑—É –æ—Ç–∫—Ä–æ–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        break;
      case '‚ùì –ü–æ–º–æ—â—å':
        await ctx.reply(
          '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
          '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n' +
          '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
          '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @admin'
        );
        break;
      default:
        await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
    }
  } catch (error) {
    loggerBot.error('Message', 'Error in message handler', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  loggerBot.error('System', 'Unhandled error', err);
});

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è API Telegram –±–æ—Ç–∞
export const botAPI = {
  handleUpdate: async (update: any) => {
    logger.info('Bot', 'Handling update (stub)', { update_id: update.update_id });
    return true;
  },
  api: {
    getWebhookInfo: async () => {
      return {
        url: 'https://example.com/api/webhook',
        has_custom_certificate: false,
        pending_update_count: 0,
        last_error_date: null,
        last_error_message: null,
        max_connections: 40,
        allowed_updates: ['message', 'edited_message', 'callback_query']
      };
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
export async function startBot() {
  logger.info('Bot', 'Bot starting (stub)');
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
  return true;
}

export default bot;
