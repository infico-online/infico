import * as fs from 'fs-extra';
import * as path from 'path';
import RouteAnalyzer from './RouteAnalyzer';
import UIAnalyzer from './UIAnalyzer';
import UIAnalyzer from './UIAnalyzer';
import type { Anthropic } from '@anthropic-ai/sdk';

interface ProjectAnalysis {
  structure: {
    components: string[];
    pages: string[];
    apis: string[];
    hooks: string[];
    utils: string[];
  };
  dependencies: {
    framework: string;
    ui: string[];
    state: string[];
    api: string[];
  };
  features: {
    name: string;
    description: string;
    files: string[];
  }[];
}

class ProjectScanner {
  private readonly projectRoot: string;
  private readonly anthropic: Anthropic;

  constructor(projectRoot: string, anthropic: Anthropic) {
    this.projectRoot = projectRoot;
    this.anthropic = anthropic;
  }

  async analyzeProject() {
    console.log('üìä –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞...');

    const structure = await this.scanProjectStructure();
    console.log('üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞');

    const packageJson = await this.analyzePackageJson();
    console.log('üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

    const shadcnComponents = await this.analyzeShadcnComponents();
    console.log('üé® –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã shadcn –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

    const routeAnalyzer = new RouteAnalyzer(this.projectRoot);
    const routeAnalysis = await routeAnalyzer.analyzeRoutes();
    const uiAnalyzer = new UIAnalyzer(this.projectRoot, this.projectRoot);
    await uiAnalyzer.analyzeUI();
    console.log('üé® UI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    const uiAnalyzer = new UIAnalyzer(this.projectRoot, this.projectRoot);
    await uiAnalyzer.analyzeUI();
    console.log('üé® UI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    console.log('üõ£Ô∏è –ú–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    const globalStyles = await this.analyzeGlobalStyles();
    console.log('üéØ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

    try {
      const response = await this.anthropic.messages.create({
        model: "claude-3-haiku-20240307",
        max_tokens: 4096,
        messages: [{
          role: "user",
          content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É Next.js –ø—Ä–æ–µ–∫—Ç–∞ –∏ –æ–ø–∏—à–∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:

–°—Ç—Ä—É–∫—Ç—É—Ä–∞: ${JSON.stringify(structure, null, 2)}
Package.json: ${JSON.stringify(packageJson, null, 2)}
ShadcnUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: ${JSON.stringify(shadcnComponents, null, 2)}
–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏: ${JSON.stringify(globalStyles, null, 2)}
–ú–∞—Ä—à—Ä—É—Ç—ã: ${JSON.stringify(routeAnalysis, null, 2)}

–û–ø–∏—à–∏:
1. –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
2. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
3. –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (Telegram, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç.–¥.)
5. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: Markdown
`
        }]
      });

      const analysis = response.content[0].text;
      
      await fs.writeFile(
        path.join(this.projectRoot, 'PROJECT_ANALYSIS.md'),
        analysis
      );

      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ PROJECT_ANALYSIS.md');
      
      return analysis;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–µ–∫—Ç–∞:', error);
      return null;
    }
  }

  private async scanProjectStructure() {
    const structure = {
      components: await this.scanDir('src/components'),
      pages: await this.scanDir('src/app'),
      apis: await this.scanDir('src/app/api'),
      hooks: await this.scanDir('src/hooks'),
      utils: await this.scanDir('src/lib')
    };

    return structure;
  }

  private async scanDir(dir: string): Promise<string[]> {
    const fullPath = path.join(this.projectRoot, dir);
    if (!await fs.pathExists(fullPath)) return [];

    const allFiles = await fs.readdir(fullPath, { recursive: true, withFileTypes: true });
    
    return allFiles
      .filter(file => file.isFile())
      .map(file => file.name)
      .filter(fileName => 
        fileName.endsWith('.ts') || 
        fileName.endsWith('.tsx') || 
        fileName.endsWith('.js') || 
        fileName.endsWith('.jsx')
      );
  }

  private async analyzePackageJson() {
    const packageJsonPath = path.join(this.projectRoot, 'package.json');
    return await fs.readJson(packageJsonPath);
  }

  private async analyzeShadcnComponents() {
    const componentsDir = path.join(this.projectRoot, 'src/components/ui');
    if (!await fs.pathExists(componentsDir)) return [];

    const files = await fs.readdir(componentsDir);
    return files.filter(file => file.endsWith('.tsx'));
  }

  private async analyzeGlobalStyles() {
    const globalCssPath = path.join(this.projectRoot, 'src/app/globals.css');
    if (!await fs.pathExists(globalCssPath)) return '';

    return await fs.readFile(globalCssPath, 'utf-8');
  }
}

export default ProjectScanner;
