import fs from 'fs-extra';
import path from 'path';
import { parse } from 'svg-parser';

class ProjectGenerator {
  private svgDirectory: string;
  private outputDirectory: string;
  private backupDirectory: string;

  constructor() {
    this.svgDirectory = './public/svg-designs';
    this.outputDirectory = './src';
    this.backupDirectory = `./backups/project-backup-${Date.now()}`;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  async createBackup() {
    await fs.ensureDir(this.backupDirectory);
    await fs.copy(this.outputDirectory, `${this.backupDirectory}/src`);
    console.log(`üì¶ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –≤ ${this.backupDirectory}`);
  }

  // –ê–Ω–∞–ª–∏–∑ SVG –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
  async analyzeDesigns() {
    const designs = await fs.readdir(this.svgDirectory);
    
    const pageDesigns = designs.filter(
      file => file.endsWith('.svg') && file.includes('-page')
    );

    const pages = pageDesigns.map(design => ({
      name: this.convertToPageName(design),
      file: design,
      components: this.extractComponents(design)
    }));

    return pages;
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  private convertToPageName(filename: string): string {
    return filename
      .replace('-page.svg', '')
      .replace(/-/g, '_')
      .toLowerCase();
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ SVG
  private extractComponents(svgFile: string): string[] {
    const svgPath = path.join(this.svgDirectory, svgFile);
    const svgContent = fs.readFileSync(svgPath, 'utf-8');
    const parsed = parse(svgContent);

    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const components: string[] = [];
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ SVG
    
    return components;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü Next.js
  async generatePages(pages) {
    for (const page of pages) {
      const pageContent = this.createPageTemplate(page);
      const pagePath = path.join(
        this.outputDirectory, 
        'app', 
        page.name, 
        'page.tsx'
      );

      await fs.ensureDir(path.dirname(pagePath));
      await fs.writeFile(pagePath, pageContent);
    }
  }

  // –®–∞–±–ª–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  private createPageTemplate(page) {
    return `
'use client';
import React from 'react';

export default function ${this.toPascalCase(page.name)}Page() {
  return (
    <div className="container mx-auto">
      <h1>${this.toTitleCase(page.name)}</h1>
      {/* –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ ${page.file} */}
      {page.components.map(component => (
        <${this.toPascalCase(component)} key={component} />
      ))}
    </div>
  );
}
    `;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  async generateComponents(pages) {
    for (const page of pages) {
      for (const componentName of page.components) {
        const componentContent = this.createComponentTemplate(componentName);
        const componentPath = path.join(
          this.outputDirectory, 
          'components', 
          `${this.toPascalCase(componentName)}.tsx`
        );

        await fs.ensureDir(path.dirname(componentPath));
        await fs.writeFile(componentPath, componentContent);
      }
    }
  }

  // –®–∞–±–ª–æ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  private createComponentTemplate(componentName: string) {
    return `
import React from 'react';

interface ${this.toPascalCase(componentName)}Props {}

export const ${this.toPascalCase(componentName)}: React.FC<${this.toPascalCase(componentName)}Props> = () => {
  return (
    <div>
      {/* –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ */}
      ${this.toTitleCase(componentName)}
    </div>
  );
}
    `;
  }

  // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω
  private toPascalCase(str: string): string {
    return str
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join('');
  }

  private toTitleCase(str: string): string {
    return str
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  async generate() {
    // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    await this.createBackup();

    const pages = await this.analyzeDesigns();
    
    await this.generatePages(pages);
    await this.generateComponents(pages);

    console.log('üöÄ –ü—Ä–æ–µ–∫—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
  }
}

export default new ProjectGenerator();
